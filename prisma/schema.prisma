generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change as needed
  url      = env("DATABASE_URL")
}

enum CourseType {
  CORE
  ELECTIVE
}

enum AssessmentType {
  MIDTERM
  FINAL
  ASSIGNMENT
  QUIZ
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum GraduationStatus {
  IN_PROGRESS
  COMPLETED
  DROPPED_OUT
}

enum TaskStatus {
  PENDING
  COMPLETED
  OVERDUE
}

model Student {
  studentId        String             @id @default(uuid())
  name             String
  email            String             @unique
  phone            String?
  dateOfBirth      DateTime
  gender           String?
  nationality      String?
  address          String?
  emergencyContact String?
  clerkId          String             @unique
  photo            String?
  department       String
  year             Int
  gpa              Float?
  cgpa             Float?
  sectionId        String?
  section          Section?           @relation(fields: [sectionId], references: [sectionId])
  enrollments      CourseEnrollment[]
  attendance       Attendance[]
  grades           Grade[]
  degreeProgress   DegreeProgress?
  studentClubs     StudentClub[]
}

model Professor {
  professorId String          @id @default(uuid())
  name        String
  email       String          @unique
  phone       String?
  clerkId     String          @unique
  department  String
  courses     CourseSection[]
  Timetable   Timetable[]
}

model Faculty {
  facultyId  String  @id @default(uuid())
  name       String
  email      String  @unique
  phone      String?
  department String
  role       String
}

model Admin {
  adminId String  @id @default(uuid())
  name    String
  email   String  @unique
  clerkId String  @unique
  phone   String?
  role    String
}

model Branch {
  branchId String    @id @default(uuid())
  name     String    @unique
  sections Section[]
}

model Section {
  sectionId String          @id @default(uuid())
  name      String
  branchId  String
  branch    Branch          @relation(fields: [branchId], references: [branchId])
  students  Student[]
  courses   CourseSection[]
  timetable Timetable[]
}

model Course {
  courseId    String             @id @default(uuid())
  courseName  String
  department  String
  credits     Int
  type        CourseType
  sections    CourseSection[]
  enrollments CourseEnrollment[]
  grades      Grade[]
  Attendance  Attendance[]
  Timetable   Timetable[]
}

model CourseSection {
  id          String     @id @default(uuid())
  sectionId   String
  courseId    String
  professorId String?
  classroom   String?
  section     Section    @relation(fields: [sectionId], references: [sectionId])
  course      Course     @relation(fields: [courseId], references: [courseId])
  professor   Professor? @relation(fields: [professorId], references: [professorId])
  timetable   Timetable? @relation(fields: [timetableId], references: [id])
  timetableId String?
}

model CourseEnrollment {
  id        String  @id @default(uuid())
  studentId String
  courseId  String
  semester  Int
  student   Student @relation(fields: [studentId], references: [studentId])
  course    Course  @relation(fields: [courseId], references: [courseId])
}

model Attendance {
  id           String           @id @default(uuid())
  studentId    String
  courseId     String
  sessionId    String
  qrData       String
  timestamp    DateTime
  status       AttendanceStatus
  location     Json
  otp          String?
  faceVerified Boolean
  networkIp    String?
  student      Student          @relation(fields: [studentId], references: [studentId])
  course       Course           @relation(fields: [courseId], references: [courseId])
}

model Timetable {
  id            String          @id @default(uuid())
  sectionId     String
  courseId      String
  startTime     DateTime
  endTime       DateTime
  dayOfWeek     Int
  classroom     String?
  professorId   String?
  section       Section         @relation(fields: [sectionId], references: [sectionId])
  course        Course          @relation(fields: [courseId], references: [courseId])
  professor     Professor?      @relation(fields: [professorId], references: [professorId])
  CourseSection CourseSection[]
}

model Grade {
  id             String         @id @default(uuid())
  studentId      String
  courseId       String
  assessmentType AssessmentType
  score          Float
  maxScore       Float
  date           DateTime
  student        Student        @relation(fields: [studentId], references: [studentId])
  course         Course         @relation(fields: [courseId], references: [courseId])
}

model DegreeProgress {
  id              String           @id @default(uuid())
  studentId       String           @unique
  totalCredits    Int
  requiredCredits Int
  electiveCredits Int
  status          GraduationStatus
  student         Student          @relation(fields: [studentId], references: [studentId])
}

model Club {
  clubId        String         @id @default(uuid())
  clubName      String
  members       StudentClub[]
  tasks         ClubTask[]
  notifications Notification[]
}

model StudentClub {
  id        String  @id @default(uuid())
  studentId String
  clubId    String
  role      String
  student   Student @relation(fields: [studentId], references: [studentId])
  club      Club    @relation(fields: [clubId], references: [clubId])
}

model Notification {
  id          String   @id @default(uuid())
  clubId      String
  title       String
  description String
  date        DateTime
  club        Club     @relation(fields: [clubId], references: [clubId])
}

model ClubTask {
  id       String     @id @default(uuid())
  clubId   String
  taskName String
  deadline DateTime
  status   TaskStatus
  club     Club       @relation(fields: [clubId], references: [clubId])
}

model SecurityLog {
  id        String   @id @default(uuid())
  userId    String
  userType  String
  loginTime DateTime
  ipAddress String?
}
